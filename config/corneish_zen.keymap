#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/modifiers.h>

#define XXXXX &none
#define _____ &trans

#define GUALT &td0
#define SPCCT &tp LCTRL SPACE
#define L1TAB &hp 1 TAB
#define LY2__ &mo 2
#define LY3__ &mo 3

#define LCTL_ &kp LCTRL
#define LSFT_ &kp LSHFT
#define ENDm_ &kp RG(END)
#define HOMEm &kp RG(HOME)

#define A____ &kp A
#define B____ &kp B
#define C____ &kp C
#define D____ &kp D
#define E____ &kp E
#define F____ &kp F
#define G____ &kp G
#define H____ &kp H
#define I____ &kp I
#define J____ &kp J
#define K____ &kp K
#define L____ &kp L
#define M____ &kp M
#define N____ &kp N
#define O____ &kp O
#define P____ &kp P
#define Q____ &kp Q
#define R____ &kp R
#define S____ &kp S
#define T____ &kp T
#define U____ &kp U
#define V____ &kp V
#define W____ &kp W
#define X____ &kp X
#define Y____ &kp Y
#define Z____ &kp Z

#define AMPS_ &kp AMPS
#define APOS_ &kp APOS
#define AT___ &kp AT
#define BSLH_ &kp BSLH
#define BSPC_ &kp BSPC
#define CRT__ &kp CARET
#define CMMA_ &kp COMMA
#define DEL__ &kp DEL
#define DLLR_ &kp DLLR
#define DOT__ &kp DOT
#define DQUT_ &kp DQT
#define ENTR_ &kp ENTER
#define EQUL_ &kp EQUAL
#define ESC__ &kp ESC
#define EXCL_ &kp EXCL
#define FSLH_ &kp FSLH
#define GRAV_ &kp GRAVE
#define HASH_ &kp HASH
#define LBKT_ &kp LBKT
#define LBRC_ &kp LBRC
#define LPAR_ &kp LPAR
#define MINS_ &kp MINUS
#define MUL__ &kp KP_MULTIPLY
#define PIPE_ &kp PIPE
#define PLUS_ &kp EQUAL
#define PRCT_ &kp PRCNT
#define RBKT_ &kp RBKT
#define RBRC_ &kp RBRC
#define RPAR_ &kp RPAR
#define SEMI_ &kp SEMI
#define TILD_ &kp TILDE
#define UNDR_ &kp UNDER

#define N0___ &kp N0
#define N1___ &kp N1
#define N2___ &kp N2
#define N3___ &kp N3
#define N4___ &kp N4
#define N5___ &kp N5
#define N6___ &kp N6
#define N7___ &kp N7
#define N8___ &kp N8
#define N9___ &kp N9

#define BTC__ &bt BT_CLR
#define BT0__ &bt BT_SEL 0
#define BT1__ &bt BT_SEL 1
#define BT2__ &bt BT_SEL 2
#define BT3__ &bt BT_SEL 3
#define BT4__ &bt BT_SEL 4

#define NEXT_ &kp K_NEXT
#define PLAY_ &kp K_PP
#define PREV_ &kp K_PREV

#define DOWN_ &kp DOWN
#define LEFT_ &kp LEFT
#define PGDN_ &kp PG_DN
#define PGUP_ &kp PG_UP
#define RGHT_ &kp RIGHT
#define UP___ &kp UP

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

/ {
    behaviors {
        tp: behavior_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping_term_ms = <200>;
            bindings = <&kp>, <&kp>;
            retro-tap;
        };

        hp: behavior_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping_term_ms = <200>;
            bindings = <&kp>, <&kp>;
            retro-tap;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RGUI>, <&kp RALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // base
        //             ┌─────┐                                      ┌─────┐
        //       ┌─────┤  E  ├─────┐                          ┌─────┤  I  ├─────┐
        // ┌─────┤  W  ├─────┤  R  ├─────┐              ┌─────┤  U  ├─────┤  O  ├─────┐
        // │  Q  ├─────┤  D  ├─────┤  T  │              │  Y  ├─────┤  K  ├─────┤  P  │
        // ├─────┤  S  ├─────┤  F  ├─────┤              ├─────┤  J  ├─────┤  L  ├─────┤
        // │  A  ├─────┤  C  ├─────┤  G  │              │  H  ├─────┤  ,  ├─────┤  ;  │
        // ├─────┤  X  ├─────┤  V  ├─────┤              ├─────┤  M  ├─────┤  .  ├─────┤
        // │  Z  ├─────┘     └─────┤  B  │              │  N  ├─────┘     └─────┤  /  │
        // └─────┘        ┌─────┐  └─────┘              └─────┘  ┌─────┐        └─────┘
        //                │ ly3 │┌─────┐┌─────┐    ┌─────┐┌─────┐│gu/al│
        //                └─────┘│l1/tb││shift│    │sp/ct││ ly2 │└─────┘
        //                       └─────┘└─────┘    └─────┘└─────┘
        default_layer {
            label = "BASE";
            bindings = <
Q____ W____ E____ R____ T____       Y____ U____ I____ O____ P____
A____ S____ D____ F____ G____       H____ J____ K____ L____ SEMI_
Z____ X____ C____ V____ B____       N____ M____ CMMA_ DOT__ FSLH_
            LY3__ L1TAB LSFT_       SPCCT LY2__ GUALT
            >;
        };

        // layer 1 - symbols
        //             ┌─────┐                                      ┌─────┐
        //       ┌─────┤  #  ├─────┐                          ┌─────┤  *  ├─────┐
        // ┌─────┤  @  ├─────┤  $  ├─────┐              ┌─────┤  &  ├─────┤  (  ├─────┐
        // │  !  ├─────┤  +  ├─────┤  %  │              │  ^  ├─────┤  -  ├─────┤  )  │
        // ├─────┤  =  ├─────┤  {  ├─────┤              ├─────┤  }  ├─────┤  _  ├─────┤
        // │  '  ├─────┤  ~  ├─────┤  "  │              │  |  ├─────┤     ├─────┤  `  │
        // ├─────┤     ├─────┤  [  ├─────┤              ├─────┤  ]  ├─────┤     ├─────┤
        // │     ├─────┘     └─────┤     │              │     ├─────┘     └─────┤  \  │
        // └─────┘        ┌─────┐  └─────┘              └─────┘  ┌─────┐        └─────┘
        //                │     │┌─────┐┌─────┐    ┌─────┐┌─────┐│     │
        //                └─────┘│     ││     │    │ ENT ││ ESC │└─────┘
        //                       └─────┘└─────┘    └─────┘└─────┘
        symbols_layer {
           label = "SYMBOL";
           bindings = <
EXCL_ AT___ HASH_ DLLR_ PRCT_       CRT__ AMPS_ MUL__ LPAR_ RPAR_
APOS_ EQUL_ PLUS_ LBRC_ DQUT_       PIPE_ RBRC_ MINS_ UNDR_ GRAV_
XXXXX XXXXX TILD_ LBKT_ XXXXX       XXXXX RBKT_ XXXXX XXXXX BSLH_
            _____ _____ _____       ENTR_ ESC__ _____
           >;
        };

        // layer 2 - navigation
        //             ┌─────┐                                      ┌─────┐
        //       ┌─────┤     ├─────┐                          ┌─────┤     ├─────┐
        // ┌─────┤     ├─────┤     ├─────┐              ┌─────┤ bsp ├─────┤     ├─────┐
        // │     ├─────┤shift├─────┤     │              │     ├─────┤down ├─────┤ del │
        // ├─────┤     ├─────┤ctrl ├─────┤              ├─────┤left ├─────┤ up  ├─────┤
        // │     ├─────┤     ├─────┤     │              │     ├─────┤pgdwn├─────┤right│
        // ├─────┤     ├─────┤     ├─────┤              ├─────┤home ├─────┤pgup ├─────┤
        // │     ├─────┘     └─────┤     │              │     ├─────┘     └─────┤ end │
        // └─────┘        ┌─────┐  └─────┘              └─────┘  ┌─────┐        └─────┘
        //                │     │┌─────┐┌─────┐    ┌─────┐┌─────┐│     │
        //                └─────┘│     ││     │    │     ││     │└─────┘
        //                       └─────┘└─────┘    └─────┘└─────┘
        navigation_layer {
            label = "NAV";
            bindings = <
XXXXX XXXXX XXXXX XXXXX XXXXX       XXXXX BSPC_ XXXXX XXXXX DEL__
XXXXX XXXXX LSFT_ LCTL_ XXXXX       XXXXX LEFT_ DOWN_ UP___ RGHT_
XXXXX XXXXX XXXXX XXXXX XXXXX       XXXXX HOMEm PGDN_ PGUP_ ENDm_
            _____ _____ _____       _____ _____ _____
            >;
        };

        // layer 3 - numbers and media
        //             ┌─────┐                                      ┌─────┐
        //       ┌─────┤ BT3 ├─────┐                          ┌─────┤  8  ├─────┐
        // ┌─────┤ BT2 ├─────┤ BT4 ├─────┐              ┌─────┤  7  ├─────┤  9  ├─────┐
        // │ BT1 ├─────┤prev ├─────┤ BT5 │              │     ├─────┤  5  ├─────┤     │
        // ├─────┤play ├─────┤next ├─────┤              ├─────┤  4  ├─────┤  6  ├─────┤
        // │     ├─────┤     ├─────┤     │              │     ├─────┤  2  ├─────┤  .  │
        // ├─────┤     ├─────┤     ├─────┤              ├─────┤  1  ├─────┤  3  ├─────┤
        // │ CLR ├─────┘     └─────┤     │              │     ├─────┘     └─────┤     │
        // └─────┘        ┌─────┐  └─────┘              └─────┘  ┌─────┐        └─────┘
        //                │     │┌─────┐┌─────┐    ┌─────┐┌─────┐│     │
        //                └─────┘│     ││     │    │  0  ││     │└─────┘
        //                       └─────┘└─────┘    └─────┘└─────┘
        numbers_layer {
            label = "NUMBER";
            bindings = <
BT0__ BT1__ BT2__ BT3__ BT4__       XXXXX N7___ N8___ N9___ XXXXX
XXXXX PLAY_ PREV_ NEXT_ XXXXX       XXXXX N4___ N5___ N6___ DOT__
BTC__ XXXXX XXXXX XXXXX XXXXX       XXXXX N1___ N2___ N3___ XXXXX
            _____ _____ _____       N0___ _____ _____
            >;
        };
    };
};
